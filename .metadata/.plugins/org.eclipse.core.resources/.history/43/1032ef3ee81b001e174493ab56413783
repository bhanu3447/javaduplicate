package String;

import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;

public class StringPrograms 
{
  public static void main(String[] args) 
  {
	 
	  Scanner scn=new Scanner(System.in);
	  System.out.println("enter a string");
//	  String s=scn.nextLine();
//	  String s="MalaYaLaM";
      
//	  if(PalindromeCharArray(s))
//	  {
//		  System.out.println(s+" is a palindrome");
//	  }
//	  else
//	  {
//		  System.out.println(s+" is not a palindrome");
//	  }
	  
	  
//	  if(PalindromeCharAt(s))
//	  {
//		  System.out.println(s+" is a palindrome");
//	  }
//	  else
//	  {
//		  System.out.println(s+" is not a palindrome");
//	  }
//	  System.out.println();
	  
	  
//	  if(PalindromeStringBuilder(s))
//	  {
//		  System.out.println(s+" is a palindrome");
//	  }
//	  else
//	  {
//		  System.out.println(s+" is not a palindrome");
//	  }
	  
	  
//	  if(PalindromeStringBuilder(s))
//	  {
//		  System.out.println(s+" is a palindrome");
//	  }
//	  else 
//	  {
//		  System.out.println(s+" is not a palindrome");
//	  }
	  
	  
//	  palindromes(s);
	  
	  
//	  String s="The quick brown fox jumps over the lazy dog";
//	  if(panagram(s))
//	  {
//		  System.out.println(s+" is a panagram");
//	  }
//	  else
//	  {
//	    System.out.println(s+" is not a panagram");
//	  }
	  
//	     if(panagramset(s))
//		  {
//			  System.out.println(s+" is a panagram");
//		  }
//		  else
//		  {
//		    System.out.println(s+" is not a panagram");
//		  }
	  
//	  if(panagramboolean(s))
//		  {
//			  System.out.println(s+" is a panagram");
//		  }
//		  else
//		  {
//		    System.out.println(s+" is not a panagram");
//		  }
	  
	  
	  String s1="race";
	  String s2="care";
	 if( anagram(s1, s2))
	 {
		  System.out.println(s1+"and"+s2+"are anagrams");
	  }
	  else
	  {
		  System.out.println(s1+"and"+s2+"are anagrams");
	  }
		 
  }
  public static boolean PalindromeCharArray(String s)
  {
	char[] c = s.toUpperCase().toCharArray();
	int i=0;
	int j=c.length-1;
	while(i<j)
	{
	   if(c[i]!=c[j]) return false;
	   i++;
	   j--;
	}
	return true;
  }
  public static boolean PalindromeCharAt(String s)
  {
	   s.toUpperCase();
	int i=0;
	int j=s.length()-1;
	
	while(i<j)
	{
		if(s.charAt(i)!=s.charAt(j)) return false;
		i++;
		j--;
	}
	return true;
  }
  public static boolean PalindromeStringBuilder(String s)
  {
	  s=s.toUpperCase();
	  StringBuilder sb = new StringBuilder(s);
	  return s.equals(sb.reverse().toString());

  }
  public static void palindromes(String s)
  {
	  s=s.toUpperCase();
	  int count=0;
	  for(int i=0;i<s.length()-1;i++)
	  {
		  for(int j=i+2;j<=s.length();j++)
		  {
			  String s1 = s.substring(i, j);
			  if(PalindromeCharAt(s1)) 
				  {
				    count++;
				    System.out.println(s1);
				  }
		  }
	  }
	  System.out.println(" no of palindromes in "+s+" are "+count);
  }
  public static boolean panagram(String s)
  {
	  s=s.toUpperCase();
	  for(char c='A';c <='Z';c++)
	  {
		  if(s.indexOf(c)==-1)
			  {
			    return false;
			  }
	  }
	  return true;
  }
  public static boolean panagramset(String s)
  {
	  s=s.toUpperCase();
	  
	  Set<Character> c= new HashSet<>();
	 
	  for(char a:s.toCharArray())
	  {
		  if(Character.isLetter(a))
		  {
			  c.add(a);
		  }
	  }
	  return c.size()==26;
  }
  public static boolean panagramboolean(String s)
  {
	  s=s.toLowerCase();
	  
	  boolean []b=new boolean[26];
	  
	  for(int i=0;i<s.length();i++)
	  {
		  char c=s.charAt(i);
		  if(Character.isLetter(c))
		  {
			  int index=c-'a';
			  b[index]=true;
		  }
	  }
	  for(boolean letter:b)
	  {
		  if(!letter)
		  {
			  return false;
		  }
	  }
	  return true;
  }
  public static boolean anagram(String s1,String s2)
  {
	  s1=s1.toLowerCase();
	  s2=s2.toLowerCase();
	while(true)
	{
	   if(s1.length()==0&&s2.length()==0) return true;
	    if(s1.length()!=s2.length()) return false;
	    char c = s1.charAt(0);
	    s1=s1.replace(c+"", "");
	    s2=s2.replace(c+"", "");
	}
  }
}
