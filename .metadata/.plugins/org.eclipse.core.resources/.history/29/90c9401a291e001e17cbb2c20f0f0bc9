package linkedlist;



public class DoublyLinkedList 
{
    public static void main(String[] args) {
        DoublyLinkedListImpl list = new DoublyLinkedListImpl();
        list.insertAtHead(10);
        list.displayForward();

        list.insertAtTail(20);
        list.displayForward();

        list.insertAtIndex(30, 1);
        list.displayForward();

        list.reverse();
        list.displayForward();

        list.deleteAtHead();
        list.displayForward();

        list.deleteAtTail();
        list.displayForward();

        list.deleteAtIndex(1);
        list.displayForward();
    }
}

//class Node {
//    int data;
//    Node prev;
//    Node next;
//
//    public Node(int data) {
//        this.data = data;
//        this.prev = null;
//        this.next = null;
//    }
//}

class DoublyLinkedListImpl {
    private Node head;
    private Node tail;
    private int size;

    public int getSize() {
        return size;
    }

    public boolean isEmpty() {
        return size == 0;
    }

    public void insertAtHead(int data) {
        Node newNode = new Node(data);
        if (isEmpty()) {
            head = newNode;
            tail = newNode;
        } else {
            newNode.next = head;
            head.prev = newNode;
            head = newNode;
        }
        size++;
    }

    public void insertAtTail(int data) {
        Node newNode = new Node(data);
        if (isEmpty()) {
            head = newNode;
            tail = newNode;
        } else {
            newNode.prev = tail;
            tail.next = newNode;
            tail = newNode;
        }
        size++;
    }

    public void insertAtIndex(int data, int index) {
        if (index < 0 || index > size)
            throw new IndexOutOfBoundsException("Invalid index");

        if (index == 0) {
            insertAtHead(data);
        } else if (index == size) {
            insertAtTail(data);
        } else {
            Node newNode = new Node(data);
            Node curr = head;
            for (int i = 1; i < index; i++) {
                curr = curr.next;
            }
            newNode.next = curr.next;
            newNode.prev = curr;
            curr.next.prev = newNode;
            curr.next = newNode;
            size++;
        }
    }

    public void deleteAtHead() {
        if (isEmpty())
            throw new RuntimeException("List is empty");

        if (size == 1) {
            head = null;
            tail = null;
        } else {
            head = head.next;
            head.prev = null;
        }
        size--;
    }

    public void deleteAtTail() {
        if (isEmpty()) {
            throw new RuntimeException("List is empty");
        }

        if (size == 1) {
            head = null;
            tail = null;
        } else {
            tail = tail.prev;
            tail.next = null;
        }
        size--;
    }

    public void deleteAtIndex(int index) {
        if (index < 0 || index >= size)
            throw new IndexOutOfBoundsException("Invalid index");

        if (index == 0) {
            deleteAtHead();
        } else if (index == size - 1) {
            deleteAtTail();
        } else {
            Node curr = head;
            for (int i = 1; i < index; i++) {
                curr = curr.next;
            }
            curr.next = curr.next.next;
            curr.next.prev = curr;
            size--;
        }
    }

    public void displayForward() {
        if (isEmpty()) {
            System.out.println("List is empty");
            return;
        }
        Node curr = head;
        while (curr != null) {
            System.out.print(curr.data + " -> ");
            curr = curr.next;
        }
        System.out.println();
    }

    public void displayBackward() {
        if (isEmpty()) {
            System.out.println("List is empty");
            return;
        }

        Node curr = tail;
        while (curr != null) {
            System.out.print(curr.data + " -> ");
            curr = curr.prev;
        }
        System.out.println();
    }

    public void reverse() {
        if (isEmpty() || head.next == null)
            return;

        Node curr = head;
        Node temp = null;

        while (curr != null) {
            temp = curr.prev;
            curr.prev = curr.next;
            curr.next = temp;
            curr = curr.prev;
        }

        temp = head;
        head = tail;
        tail = temp;
    }
}
